(set-logic HO_ALL)
(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :check-models true)
(set-option :sets-exp true)
(set-option :dag-thresh 0)
(set-option :uf-lazy-ll true)
(set-option :fmf-bound true)
(set-option :tlimit-per 20000)
(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :check-models true)
(set-option :sets-exp true)
(set-option :dag-thresh 0)
(set-option :uf-lazy-ll true)
(set-option :fmf-bound true)
(set-option :tlimit-per 20000)
(declare-const time (Set (Tuple Int)))
(declare-const A (Set (Tuple Int)))
(declare-const not_A (Set (Tuple Int Int)))
(declare-const B (Set (Tuple Int)))
(declare-const not_B (Set (Tuple Int Int)))
(declare-const C (Set (Tuple Int)))
(declare-const not_C (Set (Tuple Int Int)))
(declare-const D (Set (Tuple Int)))
(declare-const not_D (Set (Tuple Int Int)))
(declare-const Measure (Set (Tuple Int Int)))
(assert (set.some (lambda ((tuple_21 (Tuple Int))) (set.some (lambda ((tuple_22 (Tuple Int Int))) (and (not (=> true (or (set.all (lambda ((tuple_24 (Tuple Int Int))) (=> (= (+ ((_ tuple.select 0) tuple_22) 10) ((_ tuple.select 0) tuple_24)) (set.some (lambda ((tuple_25 (Tuple Int))) (and (>= ((_ tuple.select 0) tuple_25) (+ ((_ tuple.select 0) tuple_24) 0)) (<= ((_ tuple.select 0) tuple_25) (+ ((_ tuple.select 0) tuple_24) 5)))) B))) Measure) (set.some (lambda ((tuple_23 (Tuple Int))) (and (>= ((_ tuple.select 0) tuple_23) (+ ((_ tuple.select 0) tuple_21) 1)) (<= ((_ tuple.select 0) tuple_23) (+ ((_ tuple.select 0) tuple_21) 10)))) A)))) (= ((_ tuple.select 0) tuple_21) ((_ tuple.select 0) tuple_22)))) Measure)) C))
(assert (set.all (lambda ((tuple_2 (Tuple Int))) (set.some (lambda ((tuple_3 (Tuple Int Int))) (and (=> true (or (set.some (lambda ((tuple_5 (Tuple Int Int))) (and (set.some (lambda ((tuple_6 (Tuple Int))) (and (>= ((_ tuple.select 0) tuple_6) (+ ((_ tuple.select 0) tuple_5) 0)) (<= ((_ tuple.select 0) tuple_6) (+ ((_ tuple.select 0) tuple_5) 5)))) D) (= (+ ((_ tuple.select 0) tuple_3) 10) ((_ tuple.select 0) tuple_5)))) Measure) (set.some (lambda ((tuple_4 (Tuple Int))) (and (>= ((_ tuple.select 0) tuple_4) (+ ((_ tuple.select 0) tuple_2) 0)) (<= ((_ tuple.select 0) tuple_4) (+ ((_ tuple.select 0) tuple_2) 10)))) B))) (= ((_ tuple.select 0) tuple_2) ((_ tuple.select 0) tuple_3)))) Measure)) A))
(assert (set.all (lambda ((tuple_30 (Tuple Int))) (set.some (lambda ((tuple_31 (Tuple Int Int))) (and (set.some (lambda ((tuple_32 (Tuple Int))) (and (>= ((_ tuple.select 0) tuple_32) (+ ((_ tuple.select 0) tuple_30) 0)) (<= ((_ tuple.select 0) tuple_32) (+ ((_ tuple.select 0) tuple_30) 1)))) D) (= ((_ tuple.select 0) tuple_30) ((_ tuple.select 0) tuple_31)))) Measure)) B))
(assert (and (and (forall ((D_time_Int_9 Int) (not_D_start_time_Int_10 Int) (not_D_end_time_Int_11 Int)) (=> (and (set.member (tuple not_D_start_time_Int_10 not_D_end_time_Int_11) not_D) (set.member (tuple D_time_Int_9) D)) (not (and (<= D_time_Int_9 not_D_end_time_Int_11) (<= not_D_start_time_Int_10 D_time_Int_9))))) (and (forall ((C_time_Int_6 Int) (not_C_start_time_Int_7 Int) (not_C_end_time_Int_8 Int)) (=> (and (set.member (tuple not_C_start_time_Int_7 not_C_end_time_Int_8) not_C) (set.member (tuple C_time_Int_6) C)) (not (and (<= C_time_Int_6 not_C_end_time_Int_8) (<= not_C_start_time_Int_7 C_time_Int_6))))) (and (forall ((B_time_Int_3 Int) (not_B_start_time_Int_4 Int) (not_B_end_time_Int_5 Int)) (=> (and (set.member (tuple not_B_start_time_Int_4 not_B_end_time_Int_5) not_B) (set.member (tuple B_time_Int_3) B)) (not (and (<= B_time_Int_3 not_B_end_time_Int_5) (<= not_B_start_time_Int_4 B_time_Int_3))))) (forall ((A_time_Int_0 Int) (not_A_start_time_Int_1 Int) (not_A_end_time_Int_2 Int)) (=> (and (set.member (tuple not_A_start_time_Int_1 not_A_end_time_Int_2) not_A) (set.member (tuple A_time_Int_0) A)) (not (and (<= A_time_Int_0 not_A_end_time_Int_2) (<= not_A_start_time_Int_1 A_time_Int_0)))))))) (set.all (lambda ((tuple_44 (Tuple Int Int Int Int))) (=> (= ((_ tuple.select 0) tuple_44) ((_ tuple.select 2) tuple_44)) (and (= ((_ tuple.select 1) tuple_44) ((_ tuple.select 3) tuple_44)) (= ((_ tuple.select 0) tuple_44) ((_ tuple.select 2) tuple_44))))) (rel.product Measure Measure))))
(assert (=> (set.some (lambda ((tuple_45 (Tuple Int))) true) A) (and (set.some (lambda ((tuple_48 (Tuple Int))) (set.all (lambda ((tuple_49 (Tuple Int))) (<= ((_ tuple.select 0) tuple_49) ((_ tuple.select 0) tuple_48))) A)) A) (set.some (lambda ((tuple_46 (Tuple Int))) (set.all (lambda ((tuple_47 (Tuple Int))) (>= ((_ tuple.select 0) tuple_47) ((_ tuple.select 0) tuple_46))) A)) A))))
(assert (=> (set.some (lambda ((tuple_50 (Tuple Int))) true) B) (and (set.some (lambda ((tuple_53 (Tuple Int))) (set.all (lambda ((tuple_54 (Tuple Int))) (<= ((_ tuple.select 0) tuple_54) ((_ tuple.select 0) tuple_53))) B)) B) (set.some (lambda ((tuple_51 (Tuple Int))) (set.all (lambda ((tuple_52 (Tuple Int))) (>= ((_ tuple.select 0) tuple_52) ((_ tuple.select 0) tuple_51))) B)) B))))
(assert (=> (set.some (lambda ((tuple_55 (Tuple Int))) true) C) (and (set.some (lambda ((tuple_58 (Tuple Int))) (set.all (lambda ((tuple_59 (Tuple Int))) (<= ((_ tuple.select 0) tuple_59) ((_ tuple.select 0) tuple_58))) C)) C) (set.some (lambda ((tuple_56 (Tuple Int))) (set.all (lambda ((tuple_57 (Tuple Int))) (>= ((_ tuple.select 0) tuple_57) ((_ tuple.select 0) tuple_56))) C)) C))))
(assert (=> (set.some (lambda ((tuple_60 (Tuple Int))) true) D) (and (set.some (lambda ((tuple_63 (Tuple Int))) (set.all (lambda ((tuple_64 (Tuple Int))) (<= ((_ tuple.select 0) tuple_64) ((_ tuple.select 0) tuple_63))) D)) D) (set.some (lambda ((tuple_61 (Tuple Int))) (set.all (lambda ((tuple_62 (Tuple Int))) (>= ((_ tuple.select 0) tuple_62) ((_ tuple.select 0) tuple_61))) D)) D))))
(assert (set.all (lambda ((tuple_1 (Tuple Int))) (>= ((_ tuple.select 0) tuple_1) 0)) time))
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert (set.all (lambda ((tuple_65 (Tuple Int Int))) (set.some (lambda ((tuple_66 (Tuple Int))) (= ((_ tuple.select 0) tuple_66) ((_ tuple.select 0) tuple_65))) time)) Measure))
(check-sat)
(get-model)
