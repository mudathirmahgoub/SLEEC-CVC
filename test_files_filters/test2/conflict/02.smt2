(set-logic HO_ALL)
(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :check-models true)
(set-option :sets-exp true)
(set-option :dag-thresh 0)
(set-option :uf-lazy-ll true)
(set-option :fmf-bound true)
(set-option :tlimit-per 20000)
(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :check-models true)
(set-option :sets-exp true)
(set-option :dag-thresh 0)
(set-option :uf-lazy-ll true)
(set-option :fmf-bound true)
(set-option :tlimit-per 20000)
(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :check-models true)
(set-option :sets-exp true)
(set-option :dag-thresh 0)
(set-option :uf-lazy-ll true)
(set-option :fmf-bound true)
(set-option :tlimit-per 20000)
(declare-const time (Set (Tuple Int)))
(declare-const A (Set (Tuple Int)))
(declare-const not_A (Set (Tuple Int Int)))
(declare-const B (Set (Tuple Int)))
(declare-const not_B (Set (Tuple Int Int)))
(declare-const C (Set (Tuple Int)))
(declare-const not_C (Set (Tuple Int Int)))
(declare-const Measure (Set (Tuple Int Int)))
(assert (set.some (lambda ((tuple_38 (Tuple Int Int Int))) (= ((_ tuple.select 0) tuple_38) ((_ tuple.select 1) tuple_38))) (rel.product A Measure)))
(assert (set.all (lambda ((tuple_2 (Tuple Int))) (set.some (lambda ((tuple_3 (Tuple Int Int))) (and (=> true (or (set.some (lambda ((tuple_5 (Tuple Int Int))) (and (set.some (lambda ((tuple_6 (Tuple Int))) (and (>= ((_ tuple.select 0) tuple_6) (+ ((_ tuple.select 0) tuple_5) 0)) (<= ((_ tuple.select 0) tuple_6) (+ ((_ tuple.select 0) tuple_5) 5)))) C) (= (+ ((_ tuple.select 0) tuple_3) 10) ((_ tuple.select 0) tuple_5)))) Measure) (set.some (lambda ((tuple_4 (Tuple Int))) (and (>= ((_ tuple.select 0) tuple_4) (+ ((_ tuple.select 0) tuple_2) 0)) (<= ((_ tuple.select 0) tuple_4) (+ ((_ tuple.select 0) tuple_2) 10)))) B))) (= ((_ tuple.select 0) tuple_2) ((_ tuple.select 0) tuple_3)))) Measure)) A))
(assert (set.all (lambda ((tuple_16 (Tuple Int))) (set.some (lambda ((tuple_17 (Tuple Int Int))) (and (=> true (or (set.some (lambda ((tuple_19 (Tuple Int Int))) (and (set.some (lambda ((tuple_20 (Tuple Int))) (and (>= ((_ tuple.select 0) tuple_20) (+ ((_ tuple.select 0) tuple_19) 0)) (<= ((_ tuple.select 0) tuple_20) (+ ((_ tuple.select 0) tuple_19) 5)))) B) (= (+ ((_ tuple.select 0) tuple_17) 10) ((_ tuple.select 0) tuple_19)))) Measure) (set.some (lambda ((tuple_18 (Tuple Int))) (and (>= ((_ tuple.select 0) tuple_18) (+ ((_ tuple.select 0) tuple_16) 0)) (<= ((_ tuple.select 0) tuple_18) (+ ((_ tuple.select 0) tuple_16) 10)))) A))) (= ((_ tuple.select 0) tuple_16) ((_ tuple.select 0) tuple_17)))) Measure)) C))
(assert (set.all (lambda ((tuple_30 (Tuple Int))) (set.some (lambda ((tuple_31 (Tuple Int Int))) (and (set.some (lambda ((tuple_33 (Tuple Int Int))) (and (= ((_ tuple.select 1) tuple_33) (+ ((_ tuple.select 0) tuple_30) 30)) (= ((_ tuple.select 0) tuple_33) (+ ((_ tuple.select 0) tuple_30) 0)))) not_B) (= ((_ tuple.select 0) tuple_30) ((_ tuple.select 0) tuple_31)))) Measure)) A))
(assert (and (and (forall ((C_time_Int_6 Int) (not_C_start_time_Int_7 Int) (not_C_end_time_Int_8 Int)) (=> (and (set.member (tuple not_C_start_time_Int_7 not_C_end_time_Int_8) not_C) (set.member (tuple C_time_Int_6) C)) (not (and (<= C_time_Int_6 not_C_end_time_Int_8) (<= not_C_start_time_Int_7 C_time_Int_6))))) (and (forall ((B_time_Int_3 Int) (not_B_start_time_Int_4 Int) (not_B_end_time_Int_5 Int)) (=> (and (set.member (tuple not_B_start_time_Int_4 not_B_end_time_Int_5) not_B) (set.member (tuple B_time_Int_3) B)) (not (and (<= B_time_Int_3 not_B_end_time_Int_5) (<= not_B_start_time_Int_4 B_time_Int_3))))) (forall ((A_time_Int_0 Int) (not_A_start_time_Int_1 Int) (not_A_end_time_Int_2 Int)) (=> (and (set.member (tuple not_A_start_time_Int_1 not_A_end_time_Int_2) not_A) (set.member (tuple A_time_Int_0) A)) (not (and (<= A_time_Int_0 not_A_end_time_Int_2) (<= not_A_start_time_Int_1 A_time_Int_0))))))) (set.all (lambda ((tuple_57 (Tuple Int Int Int Int))) (=> (= ((_ tuple.select 0) tuple_57) ((_ tuple.select 2) tuple_57)) (and (= ((_ tuple.select 1) tuple_57) ((_ tuple.select 3) tuple_57)) (= ((_ tuple.select 0) tuple_57) ((_ tuple.select 2) tuple_57))))) (rel.product Measure Measure))))
(assert (=> (set.some (lambda ((tuple_42 (Tuple Int))) true) A) (and (set.some (lambda ((tuple_45 (Tuple Int))) (set.all (lambda ((tuple_46 (Tuple Int))) (<= ((_ tuple.select 0) tuple_46) ((_ tuple.select 0) tuple_45))) A)) A) (set.some (lambda ((tuple_43 (Tuple Int))) (set.all (lambda ((tuple_44 (Tuple Int))) (>= ((_ tuple.select 0) tuple_44) ((_ tuple.select 0) tuple_43))) A)) A))))
(assert (=> (set.some (lambda ((tuple_47 (Tuple Int))) true) B) (and (set.some (lambda ((tuple_50 (Tuple Int))) (set.all (lambda ((tuple_51 (Tuple Int))) (<= ((_ tuple.select 0) tuple_51) ((_ tuple.select 0) tuple_50))) B)) B) (set.some (lambda ((tuple_48 (Tuple Int))) (set.all (lambda ((tuple_49 (Tuple Int))) (>= ((_ tuple.select 0) tuple_49) ((_ tuple.select 0) tuple_48))) B)) B))))
(assert (=> (set.some (lambda ((tuple_52 (Tuple Int))) true) C) (and (set.some (lambda ((tuple_55 (Tuple Int))) (set.all (lambda ((tuple_56 (Tuple Int))) (<= ((_ tuple.select 0) tuple_56) ((_ tuple.select 0) tuple_55))) C)) C) (set.some (lambda ((tuple_53 (Tuple Int))) (set.all (lambda ((tuple_54 (Tuple Int))) (>= ((_ tuple.select 0) tuple_54) ((_ tuple.select 0) tuple_53))) C)) C))))
(assert (set.all (lambda ((tuple_1 (Tuple Int))) (>= ((_ tuple.select 0) tuple_1) 0)) time))
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert (set.all (lambda ((tuple_58 (Tuple Int Int))) (set.some (lambda ((tuple_59 (Tuple Int))) (= ((_ tuple.select 0) tuple_59) ((_ tuple.select 0) tuple_58))) time)) Measure))
(check-sat)
