(set-logic HO_ALL)
(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :check-models true)
(set-option :sets-exp true)
(set-option :dag-thresh 0)
(set-option :uf-lazy-ll true)
(set-option :fmf-bound true)
(set-option :tlimit-per 20000)
(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :check-models true)
(set-option :sets-exp true)
(set-option :dag-thresh 0)
(set-option :uf-lazy-ll true)
(set-option :fmf-bound true)
(set-option :tlimit-per 20000)
(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :check-models true)
(set-option :sets-exp true)
(set-option :dag-thresh 0)
(set-option :uf-lazy-ll true)
(set-option :fmf-bound true)
(set-option :tlimit-per 20000)
(declare-const time (Set (Tuple Int)))
(declare-const A (Set (Tuple Int)))
(declare-const not_A (Set (Tuple Int Int)))
(declare-const B (Set (Tuple Int)))
(declare-const not_B (Set (Tuple Int Int)))
(declare-const C (Set (Tuple Int)))
(declare-const not_C (Set (Tuple Int Int)))
(declare-const Measure (Set (Tuple Int Int)))
(assert (exists ((A_time_Int_37 Int) (Measure_time_Int_38 Int) (Measure_m1_Int_39 Int)) (and (and (< Measure_m1_Int_39 20) (= A_time_Int_37 Measure_time_Int_38)) (and (set.member (tuple Measure_time_Int_38 Measure_m1_Int_39) Measure) (set.member (tuple A_time_Int_37) A)))))
(assert (forall ((A_time_Int_1 Int)) (=> (set.member (tuple A_time_Int_1) A) (exists ((Measure_time_Int_2 Int) (Measure_m1_Int_3 Int)) (and (and (exists ((B_time_Int_4 Int)) (and (and (>= B_time_Int_4 (+ A_time_Int_1 0)) (<= B_time_Int_4 (+ A_time_Int_1 7))) (set.member (tuple B_time_Int_4) B))) (= A_time_Int_1 Measure_time_Int_2)) (set.member (tuple Measure_time_Int_2 Measure_m1_Int_3) Measure))))))
(assert (forall ((B_time_Int_15 Int)) (=> (set.member (tuple B_time_Int_15) B) (exists ((Measure_time_Int_16 Int) (Measure_m1_Int_17 Int)) (and (and (exists ((C_time_Int_18 Int)) (and (and (>= C_time_Int_18 (+ B_time_Int_15 0)) (<= C_time_Int_18 (+ B_time_Int_15 7))) (set.member (tuple C_time_Int_18) C))) (= B_time_Int_15 Measure_time_Int_16)) (set.member (tuple Measure_time_Int_16 Measure_m1_Int_17) Measure))))))
(assert (forall ((A_time_Int_29 Int)) (=> (set.member (tuple A_time_Int_29) A) (exists ((Measure_time_Int_30 Int) (Measure_m1_Int_31 Int)) (and (and (or (exists ((C_time_Int_32 Int)) (and (and (>= C_time_Int_32 (+ A_time_Int_29 0)) (<= C_time_Int_32 (+ A_time_Int_29 15))) (set.member (tuple C_time_Int_32) C))) (not (< Measure_m1_Int_31 20))) (= A_time_Int_29 Measure_time_Int_30)) (set.member (tuple Measure_time_Int_30 Measure_m1_Int_31) Measure))))))
(assert (forall ((A_time_Int_49 Int)) (=> (set.member (tuple A_time_Int_49) A) (exists ((Measure_time_Int_50 Int) (Measure_m1_Int_51 Int)) (and (and (exists ((not_C_start_time_Int_53 Int) (not_C_end_time_Int_54 Int)) (and (and (= not_C_end_time_Int_54 (+ A_time_Int_49 11)) (= not_C_start_time_Int_53 (+ A_time_Int_49 0))) (set.member (tuple not_C_start_time_Int_53 not_C_end_time_Int_54) not_C))) (= A_time_Int_49 Measure_time_Int_50)) (set.member (tuple Measure_time_Int_50 Measure_m1_Int_51) Measure))))))
(assert (and (and (forall ((C_time_Int_92 Int) (not_C_start_time_Int_93 Int) (not_C_end_time_Int_94 Int)) (=> (and (set.member (tuple not_C_start_time_Int_93 not_C_end_time_Int_94) not_C) (set.member (tuple C_time_Int_92) C)) (not (and (<= C_time_Int_92 not_C_end_time_Int_94) (<= not_C_start_time_Int_93 C_time_Int_92))))) (and (forall ((B_time_Int_89 Int) (not_B_start_time_Int_90 Int) (not_B_end_time_Int_91 Int)) (=> (and (set.member (tuple not_B_start_time_Int_90 not_B_end_time_Int_91) not_B) (set.member (tuple B_time_Int_89) B)) (not (and (<= B_time_Int_89 not_B_end_time_Int_91) (<= not_B_start_time_Int_90 B_time_Int_89))))) (forall ((A_time_Int_86 Int) (not_A_start_time_Int_87 Int) (not_A_end_time_Int_88 Int)) (=> (and (set.member (tuple not_A_start_time_Int_87 not_A_end_time_Int_88) not_A) (set.member (tuple A_time_Int_86) A)) (not (and (<= A_time_Int_86 not_A_end_time_Int_88) (<= not_A_start_time_Int_87 A_time_Int_86))))))) (forall ((Measure_time_Int_82 Int) (Measure_m1_Int_83 Int) (Measure_time_Int_84 Int) (Measure_m1_Int_85 Int)) (=> (and (set.member (tuple Measure_time_Int_84 Measure_m1_Int_85) Measure) (set.member (tuple Measure_time_Int_82 Measure_m1_Int_83) Measure)) (=> (= Measure_time_Int_82 Measure_time_Int_84) (and (= Measure_m1_Int_83 Measure_m1_Int_85) (= Measure_time_Int_82 Measure_time_Int_84)))))))
(assert (=> (exists ((A_time_Int_67 Int)) (and true (set.member (tuple A_time_Int_67) A))) (and (exists ((A_time_Int_70 Int)) (and (forall ((A_time_Int_71 Int)) (=> (set.member (tuple A_time_Int_71) A) (<= A_time_Int_71 A_time_Int_70))) (set.member (tuple A_time_Int_70) A))) (exists ((A_time_Int_68 Int)) (and (forall ((A_time_Int_69 Int)) (=> (set.member (tuple A_time_Int_69) A) (>= A_time_Int_69 A_time_Int_68))) (set.member (tuple A_time_Int_68) A))))))
(assert (=> (exists ((B_time_Int_72 Int)) (and true (set.member (tuple B_time_Int_72) B))) (and (exists ((B_time_Int_75 Int)) (and (forall ((B_time_Int_76 Int)) (=> (set.member (tuple B_time_Int_76) B) (<= B_time_Int_76 B_time_Int_75))) (set.member (tuple B_time_Int_75) B))) (exists ((B_time_Int_73 Int)) (and (forall ((B_time_Int_74 Int)) (=> (set.member (tuple B_time_Int_74) B) (>= B_time_Int_74 B_time_Int_73))) (set.member (tuple B_time_Int_73) B))))))
(assert (=> (exists ((C_time_Int_77 Int)) (and true (set.member (tuple C_time_Int_77) C))) (and (exists ((C_time_Int_80 Int)) (and (forall ((C_time_Int_81 Int)) (=> (set.member (tuple C_time_Int_81) C) (<= C_time_Int_81 C_time_Int_80))) (set.member (tuple C_time_Int_80) C))) (exists ((C_time_Int_78 Int)) (and (forall ((C_time_Int_79 Int)) (=> (set.member (tuple C_time_Int_79) C) (>= C_time_Int_79 C_time_Int_78))) (set.member (tuple C_time_Int_78) C))))))
(assert (forall ((time_val_Int_0 Int)) (=> (set.member (tuple time_val_Int_0) time) (>= time_val_Int_0 0))))
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert (forall ((Measure_time_Int_95 Int) (Measure_m1_Int_96 Int)) (=> (set.member (tuple Measure_time_Int_95 Measure_m1_Int_96) Measure) (exists ((time_val_Int_97 Int)) (and (= time_val_Int_97 Measure_time_Int_95) (set.member (tuple time_val_Int_97) time))))))
(check-sat)
