(set-logic HO_ALL)
(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :check-models true)
(set-option :sets-exp true)
(set-option :dag-thresh 0)
(set-option :uf-lazy-ll true)
(set-option :fmf-bound true)
(set-option :tlimit-per 20000)
(declare-const time (Set (Tuple Int)))
(declare-const A (Set (Tuple Int)))
(declare-const not_A (Set (Tuple Int Int)))
(declare-const B (Set (Tuple Int)))
(declare-const not_B (Set (Tuple Int Int)))
(declare-const C (Set (Tuple Int)))
(declare-const not_C (Set (Tuple Int Int)))
(declare-const Measure (Set (Tuple Int Int)))
(assert (exists ((A_time_Int_8 Int)) (and (exists ((Measure_time_Int_9 Int) (Measure_m1_Int_10 Int)) (and (and (not (=> true (or (forall ((Measure_time_Int_12 Int) (Measure_m1_Int_13 Int)) (=> (set.member (tuple Measure_time_Int_12 Measure_m1_Int_13) Measure) (=> (= (+ Measure_time_Int_9 10) Measure_time_Int_12) (exists ((C_time_Int_14 Int)) (and (and (>= C_time_Int_14 (+ Measure_time_Int_12 0)) (<= C_time_Int_14 (+ Measure_time_Int_12 5))) (set.member (tuple C_time_Int_14) C)))))) (exists ((B_time_Int_11 Int)) (and (and (>= B_time_Int_11 (+ A_time_Int_8 0)) (<= B_time_Int_11 (+ A_time_Int_8 10))) (set.member (tuple B_time_Int_11) B)))))) (= A_time_Int_8 Measure_time_Int_9)) (set.member (tuple Measure_time_Int_9 Measure_m1_Int_10) Measure))) (set.member (tuple A_time_Int_8) A))))
(assert (forall ((C_time_Int_21 Int)) (=> (set.member (tuple C_time_Int_21) C) (exists ((Measure_time_Int_22 Int) (Measure_m1_Int_23 Int)) (and (and (=> true (or (exists ((Measure_time_Int_25 Int) (Measure_m1_Int_26 Int)) (and (and (exists ((B_time_Int_27 Int)) (and (and (>= B_time_Int_27 (+ Measure_time_Int_25 0)) (<= B_time_Int_27 (+ Measure_time_Int_25 5))) (set.member (tuple B_time_Int_27) B))) (= (+ Measure_time_Int_22 10) Measure_time_Int_25)) (set.member (tuple Measure_time_Int_25 Measure_m1_Int_26) Measure))) (exists ((A_time_Int_24 Int)) (and (and (>= A_time_Int_24 (+ C_time_Int_21 0)) (<= A_time_Int_24 (+ C_time_Int_21 10))) (set.member (tuple A_time_Int_24) A))))) (= C_time_Int_21 Measure_time_Int_22)) (set.member (tuple Measure_time_Int_22 Measure_m1_Int_23) Measure))))))
(assert (forall ((A_time_Int_41 Int)) (=> (set.member (tuple A_time_Int_41) A) (exists ((Measure_time_Int_42 Int) (Measure_m1_Int_43 Int)) (and (and (exists ((not_B_start_time_Int_45 Int) (not_B_end_time_Int_46 Int)) (and (and (= not_B_end_time_Int_46 (+ A_time_Int_41 30)) (= not_B_start_time_Int_45 (+ A_time_Int_41 0))) (set.member (tuple not_B_start_time_Int_45 not_B_end_time_Int_46) not_B))) (= A_time_Int_41 Measure_time_Int_42)) (set.member (tuple Measure_time_Int_42 Measure_m1_Int_43) Measure))))))
(assert (and (and (forall ((C_time_Int_69 Int) (not_C_start_time_Int_70 Int) (not_C_end_time_Int_71 Int)) (=> (and (set.member (tuple not_C_start_time_Int_70 not_C_end_time_Int_71) not_C) (set.member (tuple C_time_Int_69) C)) (not (and (<= C_time_Int_69 not_C_end_time_Int_71) (<= not_C_start_time_Int_70 C_time_Int_69))))) (and (forall ((B_time_Int_66 Int) (not_B_start_time_Int_67 Int) (not_B_end_time_Int_68 Int)) (=> (and (set.member (tuple not_B_start_time_Int_67 not_B_end_time_Int_68) not_B) (set.member (tuple B_time_Int_66) B)) (not (and (<= B_time_Int_66 not_B_end_time_Int_68) (<= not_B_start_time_Int_67 B_time_Int_66))))) (forall ((A_time_Int_63 Int) (not_A_start_time_Int_64 Int) (not_A_end_time_Int_65 Int)) (=> (and (set.member (tuple not_A_start_time_Int_64 not_A_end_time_Int_65) not_A) (set.member (tuple A_time_Int_63) A)) (not (and (<= A_time_Int_63 not_A_end_time_Int_65) (<= not_A_start_time_Int_64 A_time_Int_63))))))) (forall ((Measure_time_Int_59 Int) (Measure_m1_Int_60 Int) (Measure_time_Int_61 Int) (Measure_m1_Int_62 Int)) (=> (and (set.member (tuple Measure_time_Int_61 Measure_m1_Int_62) Measure) (set.member (tuple Measure_time_Int_59 Measure_m1_Int_60) Measure)) (=> (= Measure_time_Int_59 Measure_time_Int_61) (and (= Measure_m1_Int_60 Measure_m1_Int_62) (= Measure_time_Int_59 Measure_time_Int_61)))))))
(assert (=> (exists ((A_time_Int_72 Int)) (and true (set.member (tuple A_time_Int_72) A))) (and (exists ((A_time_Int_75 Int)) (and (forall ((A_time_Int_76 Int)) (=> (set.member (tuple A_time_Int_76) A) (<= A_time_Int_76 A_time_Int_75))) (set.member (tuple A_time_Int_75) A))) (exists ((A_time_Int_73 Int)) (and (forall ((A_time_Int_74 Int)) (=> (set.member (tuple A_time_Int_74) A) (>= A_time_Int_74 A_time_Int_73))) (set.member (tuple A_time_Int_73) A))))))
(assert (=> (exists ((B_time_Int_77 Int)) (and true (set.member (tuple B_time_Int_77) B))) (and (exists ((B_time_Int_80 Int)) (and (forall ((B_time_Int_81 Int)) (=> (set.member (tuple B_time_Int_81) B) (<= B_time_Int_81 B_time_Int_80))) (set.member (tuple B_time_Int_80) B))) (exists ((B_time_Int_78 Int)) (and (forall ((B_time_Int_79 Int)) (=> (set.member (tuple B_time_Int_79) B) (>= B_time_Int_79 B_time_Int_78))) (set.member (tuple B_time_Int_78) B))))))
(assert (=> (exists ((C_time_Int_82 Int)) (and true (set.member (tuple C_time_Int_82) C))) (and (exists ((C_time_Int_85 Int)) (and (forall ((C_time_Int_86 Int)) (=> (set.member (tuple C_time_Int_86) C) (<= C_time_Int_86 C_time_Int_85))) (set.member (tuple C_time_Int_85) C))) (exists ((C_time_Int_83 Int)) (and (forall ((C_time_Int_84 Int)) (=> (set.member (tuple C_time_Int_84) C) (>= C_time_Int_84 C_time_Int_83))) (set.member (tuple C_time_Int_83) C))))))
(assert (forall ((time_val_Int_0 Int)) (=> (set.member (tuple time_val_Int_0) time) (>= time_val_Int_0 0))))
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert (forall ((Measure_time_Int_87 Int) (Measure_m1_Int_88 Int)) (=> (set.member (tuple Measure_time_Int_87 Measure_m1_Int_88) Measure) (exists ((time_val_Int_89 Int)) (and (= time_val_Int_89 Measure_time_Int_87) (set.member (tuple time_val_Int_89) time))))))
(check-sat)
(get-model)
