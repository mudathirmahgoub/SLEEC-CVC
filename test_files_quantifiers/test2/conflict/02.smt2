(set-logic HO_ALL)
(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :check-models true)
(set-option :sets-ext true)
(set-option :dag-thresh 0)
(set-option :uf-lazy-ll true)
(set-option :fmf-bound true)
(set-option :tlimit-per 10000)
(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :check-models true)
(set-option :sets-ext true)
(set-option :dag-thresh 0)
(set-option :uf-lazy-ll true)
(set-option :fmf-bound true)
(set-option :tlimit-per 10000)
(set-option :produce-models true)
(set-option :finite-model-find true)
(set-option :check-models true)
(set-option :sets-ext true)
(set-option :dag-thresh 0)
(set-option :uf-lazy-ll true)
(set-option :fmf-bound true)
(set-option :tlimit-per 10000)
(declare-const time (Set (Tuple Int)))
(declare-const A (Set (Tuple Int)))
(declare-const not_A (Set (Tuple Int Int)))
(declare-const B (Set (Tuple Int)))
(declare-const not_B (Set (Tuple Int Int)))
(declare-const C (Set (Tuple Int)))
(declare-const not_C (Set (Tuple Int Int)))
(declare-const Measure (Set (Tuple Int Int)))
(assert (exists ((A_time_Int_53 Int) (Measure_time_Int_54 Int) (Measure_m1_Int_55 Int)) (and (= A_time_Int_53 Measure_time_Int_54) (and (set.member (tuple Measure_time_Int_54 Measure_m1_Int_55) Measure) (set.member (tuple A_time_Int_53) A)))))
(assert (forall ((A_time_Int_1 Int)) (=> (set.member (tuple A_time_Int_1) A) (exists ((Measure_time_Int_2 Int) (Measure_m1_Int_3 Int)) (and (and (=> true (or (exists ((Measure_time_Int_5 Int) (Measure_m1_Int_6 Int)) (and (and (exists ((C_time_Int_7 Int)) (and (and (>= C_time_Int_7 (+ Measure_time_Int_5 0)) (<= C_time_Int_7 (+ Measure_time_Int_5 5))) (set.member (tuple C_time_Int_7) C))) (= (+ Measure_time_Int_2 10) Measure_time_Int_5)) (set.member (tuple Measure_time_Int_5 Measure_m1_Int_6) Measure))) (exists ((B_time_Int_4 Int)) (and (and (>= B_time_Int_4 (+ A_time_Int_1 0)) (<= B_time_Int_4 (+ A_time_Int_1 10))) (set.member (tuple B_time_Int_4) B))))) (= A_time_Int_1 Measure_time_Int_2)) (set.member (tuple Measure_time_Int_2 Measure_m1_Int_3) Measure))))))
(assert (forall ((C_time_Int_21 Int)) (=> (set.member (tuple C_time_Int_21) C) (exists ((Measure_time_Int_22 Int) (Measure_m1_Int_23 Int)) (and (and (=> true (or (exists ((Measure_time_Int_25 Int) (Measure_m1_Int_26 Int)) (and (and (exists ((B_time_Int_27 Int)) (and (and (>= B_time_Int_27 (+ Measure_time_Int_25 0)) (<= B_time_Int_27 (+ Measure_time_Int_25 5))) (set.member (tuple B_time_Int_27) B))) (= (+ Measure_time_Int_22 10) Measure_time_Int_25)) (set.member (tuple Measure_time_Int_25 Measure_m1_Int_26) Measure))) (exists ((A_time_Int_24 Int)) (and (and (>= A_time_Int_24 (+ C_time_Int_21 0)) (<= A_time_Int_24 (+ C_time_Int_21 10))) (set.member (tuple A_time_Int_24) A))))) (= C_time_Int_21 Measure_time_Int_22)) (set.member (tuple Measure_time_Int_22 Measure_m1_Int_23) Measure))))))
(assert (forall ((A_time_Int_41 Int)) (=> (set.member (tuple A_time_Int_41) A) (exists ((Measure_time_Int_42 Int) (Measure_m1_Int_43 Int)) (and (and (exists ((not_B_start_time_Int_45 Int) (not_B_end_time_Int_46 Int)) (and (and (= not_B_end_time_Int_46 (+ A_time_Int_41 30)) (= not_B_start_time_Int_45 (+ A_time_Int_41 0))) (set.member (tuple not_B_start_time_Int_45 not_B_end_time_Int_46) not_B))) (= A_time_Int_41 Measure_time_Int_42)) (set.member (tuple Measure_time_Int_42 Measure_m1_Int_43) Measure))))))
(assert (forall ((Measure_time_Int_71 Int) (Measure_m1_Int_72 Int) (Measure_time_Int_73 Int) (Measure_m1_Int_74 Int)) (=> (and (set.member (tuple Measure_time_Int_73 Measure_m1_Int_74) Measure) (set.member (tuple Measure_time_Int_71 Measure_m1_Int_72) Measure)) (=> (= Measure_time_Int_71 Measure_time_Int_73) (and (= Measure_m1_Int_72 Measure_m1_Int_74) (= Measure_time_Int_71 Measure_time_Int_73))))))
(assert (forall ((A_time_Int_59 Int)) (=> (set.member (tuple A_time_Int_59) A) (or (exists ((A_time_Int_61 Int)) (and (and (forall ((A_time_Int_62 Int)) (=> (set.member (tuple A_time_Int_62) A) (<= A_time_Int_62 A_time_Int_59))) (> A_time_Int_61 A_time_Int_59)) (set.member (tuple A_time_Int_61) A))) (forall ((A_time_Int_60 Int)) (=> (set.member (tuple A_time_Int_60) A) (<= A_time_Int_60 A_time_Int_59)))))))
(assert (forall ((B_time_Int_63 Int)) (=> (set.member (tuple B_time_Int_63) B) (or (exists ((B_time_Int_65 Int)) (and (and (forall ((B_time_Int_66 Int)) (=> (set.member (tuple B_time_Int_66) B) (<= B_time_Int_66 B_time_Int_63))) (> B_time_Int_65 B_time_Int_63)) (set.member (tuple B_time_Int_65) B))) (forall ((B_time_Int_64 Int)) (=> (set.member (tuple B_time_Int_64) B) (<= B_time_Int_64 B_time_Int_63)))))))
(assert (forall ((C_time_Int_67 Int)) (=> (set.member (tuple C_time_Int_67) C) (or (exists ((C_time_Int_69 Int)) (and (and (forall ((C_time_Int_70 Int)) (=> (set.member (tuple C_time_Int_70) C) (<= C_time_Int_70 C_time_Int_67))) (> C_time_Int_69 C_time_Int_67)) (set.member (tuple C_time_Int_69) C))) (forall ((C_time_Int_68 Int)) (=> (set.member (tuple C_time_Int_68) C) (<= C_time_Int_68 C_time_Int_67)))))))
(assert (forall ((time_val_Int_0 Int)) (=> (set.member (tuple time_val_Int_0) time) (>= time_val_Int_0 0))))
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert true)
(assert (forall ((Measure_time_Int_75 Int) (Measure_m1_Int_76 Int)) (=> (set.member (tuple Measure_time_Int_75 Measure_m1_Int_76) Measure) (exists ((time_val_Int_77 Int)) (and (= time_val_Int_77 Measure_time_Int_75) (set.member (tuple time_val_Int_77) time))))))
(check-sat)
(get-model)
