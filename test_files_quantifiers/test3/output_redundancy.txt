forall: <function forall_quantifier at 0x7f07f08d05e0>
exists: <function exists_quantifier at 0x7f07f08d04a0>
check rule_1
trail 0.0491788387298584
Result     = sat
time     = (set.union (set.singleton (tuple 9)) (set.union (set.singleton (tuple 10)) (set.union (set.singleton (tuple 1)) (set.singleton (tuple 0)))))
A     = (set.singleton (tuple 0))
not_A     = (as set.empty (Set (Tuple Int Int)))
B     = (as set.empty (Set (Tuple Int)))
not_B     = (as set.empty (Set (Tuple Int Int)))
C     = (as set.empty (Set (Tuple Int)))
not_C     = (as set.empty (Set (Tuple Int Int)))
D     = (as set.empty (Set (Tuple Int)))
not_D     = (as set.empty (Set (Tuple Int Int)))
Measure     = (set.union (set.singleton (tuple 9 9)) (set.union (set.singleton (tuple 0 0)) (set.singleton (tuple 10 0))))
****************************************************************************************************
check rule_2
trail 0.06168198585510254
Result     = sat
time     = (set.union (set.singleton (tuple 9)) (set.union (set.singleton (tuple 10)) (set.union (set.singleton (tuple 1)) (set.singleton (tuple 0)))))
A     = (as set.empty (Set (Tuple Int)))
not_A     = (as set.empty (Set (Tuple Int Int)))
B     = (as set.empty (Set (Tuple Int)))
not_B     = (as set.empty (Set (Tuple Int Int)))
C     = (set.singleton (tuple 0))
not_C     = (as set.empty (Set (Tuple Int Int)))
D     = (as set.empty (Set (Tuple Int)))
not_D     = (as set.empty (Set (Tuple Int Int)))
Measure     = (set.union (set.singleton (tuple 9 9)) (set.union (set.singleton (tuple 0 0)) (set.singleton (tuple 10 0))))
****************************************************************************************************
check rule_3
trail 0.010277032852172852
Result     = sat
time     = (set.singleton (tuple 0))
A     = (as set.empty (Set (Tuple Int)))
not_A     = (as set.empty (Set (Tuple Int Int)))
B     = (set.singleton (tuple 0))
not_B     = (as set.empty (Set (Tuple Int Int)))
C     = (as set.empty (Set (Tuple Int)))
not_C     = (as set.empty (Set (Tuple Int Int)))
D     = (as set.empty (Set (Tuple Int)))
not_D     = (as set.empty (Set (Tuple Int Int)))
Measure     = (set.singleton (tuple 0 0))
****************************************************************************************************
